#!/usr/bin/python
# -*- coding: utf-8 -*-

import hashlib, hmac, string, base64, urllib
import json, urllib
import argparse
import httplib
from urlparse import urlparse
import getpass
from uuid import UUID

def checkUrl(url):
    try:
        p = urlparse(url)
        conn = httplib.HTTPConnection(p.netloc)
        conn.request('HEAD', p.path)
        resp = conn.getresponse()
        return resp.status < 400
    except:
        return False

def getFileContent(file):
    with open(file, 'r') as dfile:
        data=dfile.read().strip()
    return data

class SignedAPICall(object):

    def __init__(self, api_url, apiKey, secret):
        self.api_url = api_url
        self.apiKey = apiKey
        self.secret = secret

    def request(self, args):
        args['apiKey'] = self.apiKey

        self.params = []
        self._sort_request(args)
        self._create_signature()
        self._build_post_request()

    def _sort_request(self, args):
        keys = sorted(args.keys())

        for key in keys:
            self.params.append(key + '=' + urllib.quote_plus(args[key]))

    def _create_signature(self):
        self.query = '&'.join(self.params)
        digest = hmac.new(
            self.secret,
            msg=self.query.lower(),
            digestmod=hashlib.sha1).digest()

        self.signature = base64.b64encode(digest)

    def _build_post_request(self):
        self.query += '&signature=' + urllib.quote_plus(self.signature)
        self.value = self.api_url + '?' + self.query


class CloudStack(SignedAPICall):

    def __getattr__(self, name):
        def handlerFunction(*args, **kwargs):
            if kwargs:
                return self._make_request(name, kwargs)
            return self._make_request(name, args[0])
        return handlerFunction

    def _http_get(self, url):
        response = urllib.urlopen(url)
        return response.read()

    def _make_request(self, command, args):
        args['response'] = 'json'
        args['command'] = command
        self.request(args)
        data = self._http_get(self.value)
        # The response is of the format {commandresponse: actual-data}
        key = command.lower() + "response"
        print data
        return json.loads(data)[key]


usage = """ccs-template-install -h hypervisor [ -u url ] -e -z zoneid [ -a apifile ] [ -k keyfile ] [ -s secretfile]

Registers a template of the given format and for the given hypervisor available at specified url with CloudStack. If template at url is extractable set --extractable to true"""

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--hypervisor", dest="hypervisor", help="Hypervisor type", required=True)
parser.add_argument("-u", "--url", help="A valid url at which template is available", required=False)
parser.add_argument("-e", "--extractable", action="store_true", dest="extractable", help="if template is extractable", default=False)
parser.add_argument("-z", "--zoneid", help="zoneid in which template is to be installed", required=True)
parser.add_argument("-a", "--apifile", help="A readable text file containing API url", required=False)
parser.add_argument("-k", "--keyfile", help="A readable text file containing API key", required=False)
parser.add_argument("-s", "--secretfile", help="A readable text file containing API secret key", required=False)

args = parser.parse_args()

package_url='https://downloads.shapeblue.com/ccs/template'
hypervisors = ['XenServer', 'KVM', 'VMware', 'HyperV', 'OVM']
image_formats = { 'XenServer': 'VHD', 'KVM' : 'QCOW2', 'HyperV' : 'VMDK',  'OVM' : 'RAW', 'VMware' : 'OVA' }
url_name = { 'XenServer': 'coreos-xen.vhd.bz2', 'KVM' : 'coreos-kvm.qcow2.bz2', 'HyperV' : 'coreos-hyperv.vhd.zip',  'OVM' : 'coreos-ovm.raw.bz2', 'VMware' : 'coreos-vmware.ova' }

format = None

if args.hypervisor not in hypervisors:
    print "Hypervisor has to one of the formats [" + ' '.join(hypervisors) + "]"
    exit(1)
else:
    format = image_formats[args.hypervisor]

if args.url is None:
    args.url = package_url + url_name[args.hypervisor]
elif not checkUrl(args.url):
    print "Invalid or not reachable url"
    exit(1)

if args.extractable is True:
    args.extractable = "true"
else:
    args.extractable = "false"

try:
    UUID(args.zoneid, version=4)
except:
    print "zone id is not a valid uuid"
    exit(1)

if args.apifile is None:
    api_url = raw_input("API url:")
else:
    api_url=getFileContent(args.apifile)

if args.keyfile is None:
    api_key = getpass.getpass("API Key:")
else:
    api_key=getFileContent(args.keyfile)

if args.secretfile is None:
    secret_key = getpass.getpass("Secret:")
else:
    secret_key=getFileContent(args.secretfile)

name = 'ShapeBlue-CCS-Template'
displaytext = 'ShapeBlue-CCS-Template'

request = {'name': name, 'displaytext': displaytext, 'format': format, 'hypervisor': args.hypervisor, 'ostypeid': '255', 'url': args.url, 'zoneid': args.zoneid, 'isextractable': args.extractable, 'ispublic':'true', 'isfeatured':'true'}

exit

api = CloudStack(api_url, api_key, secret_key)
try:
    result = api.registerTemplate(request)
    print "Template for ShapeBlue CloudStack Container Service is successfully installed"
except Exception as e:
    print "Failed to register template for ShapeBlue CloudStack Container Service due to :" + str(e)
