#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
from random import choice
import string
import argparse
import commands
import getpass

# squelch mysqldb spurious warnings
import warnings
warnings.simplefilter('ignore')

def runCmd(cmds):
    process = subprocess.Popen(' '.join(cmds), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode != 0:
        raise Exception(stderr)
    return stdout

class CcsDBDeployer(object):
    parser = None
    args = None
    user,password,host,port = [None,None,None,None]
    dbConfPath =  r"/etc/cloudstack/management"
    dbFilesPath = r"/usr/share/cloudstack-management/setup/"
    success = False
    tmpMysqlFile = os.path.join(os.path.expanduser('~/'), 'cloudstack-ccs-mysql.tmp.sql')
    mysqlBinPath = None

    def postRun(self):
        if os.path.exists(self.tmpMysqlFile):
            os.remove(self.tmpMysqlFile)

    def info(self, msg, result=None):
        output = ""
        if msg is not None:
            output = "%-80s"%msg

        if result is True:
            output += "[ \033[92m%-2s\033[0m ]\n"%"OK"
        elif result is False:
            output += "[ \033[91m%-6s\033[0m ]\n"%"FAILED"
        sys.stdout.write(output)
        sys.stdout.flush()

    def debug(self, msg):
        if not self.args.debug:
            return
        msg = "DEBUG:%s"%msg
        sys.stdout.write(msg + "\n")
        sys.stdout.flush()

    def runMysql(self, text, table, isRoot=False):
        kwargs = {}
        if not isRoot:
            kwargs['user'] = self.user
            if self.password != '': kwargs['passwd'] = self.password
        else:
            kwargs['user'] = self.rootuser
            if self.rootpassword != '': kwargs['passwd'] = self.rootpassword

        kwargs['port'] = self.port
        kwargs['host'] = self.host
        if self.mysqlBinPath is not None:
          mysqlPath = '"' + self.mysqlBinPath + os.sep + "mysql" + '"'
        else:
          mysqlPath = "mysql"
        try:
            mysqlCmds = [mysqlPath, '--user=%s'%kwargs['user'], '--host=%s'%kwargs['host'], '--port=%s'%kwargs['port']]
            if kwargs.has_key('passwd'):
                mysqlCmds.append('--password=%s'%kwargs['passwd'])
            file(self.tmpMysqlFile, 'w').write(text)
            mysqlCmds.append('<')
            mysqlCmds.append(self.tmpMysqlFile)
            runCmd(mysqlCmds)

        except Exception, e:
            err = '''Encountering an error when executing mysql script
----------------------------------------------------------------------
table:
%s

Error:
%s

Sql parameters:
%s
----------------------------------------------------------------------
            '''%(table, e.__str__(), kwargs)
            self.errorAndExit(err)

    def errorAndContinue(self, msg):
        sys.stderr.write(msg)
        sys.stderr.flush()

    def errorAndExit(self, msg):
        self.postRun()
        err = '''\n\nWe apologize for below error:
***************************************************************
%s
***************************************************************
Please run:

    ccs-setup-database -h

for full help
''' % msg
        sys.stderr.write(err)
        sys.stderr.flush()
        sys.exit(1)

    def setupDBSchema(self):

        replacements = (
                ("CREATE USER cloud identified by 'cloud';",
                    "CREATE USER %s@`localhost` identified by '%s'; CREATE USER %s@`%%` identified by '%s';"%(
                            (self.user,self.password,self.user,self.password)
                        )),
                ("cloud identified by 'cloud';",
                    "%s identified by '%s';"%(self.user,self.password)),
                ("cloud@`localhost` identified by 'cloud'",
                    "%s@`localhost` identified by '%s'"%(self.user,self.password)),
                ("cloud@`%` identified by 'cloud'",
                    "%s@`%%` identified by '%s'"%(self.user,self.password)),
                ("to cloud@`localhost`",
                    "to %s@`localhost`"%self.user),
                ("to cloud@`%`",
                    "to %s@`%%`"%self.user),
                ("TO cloud@`localhost`",
                    "to %s@`localhost`"%self.user),
                ("TO cloud@`%`",
                    "to %s@`%%`"%self.user),
                ("WHERE `User` = 'cloud' and host =",
                    "WHERE `User` = '%s' and host ="%self.user),
                ("DROP USER 'cloud'",
                    "DROP USER '%s'"%self.user),
                ("CALL `test`.`drop_user_if_exists`() ;",
                    ""),
            )

        for f in ["create-schema-ccs"]:
            p = os.path.join(self.dbFilesPath,"%s.sql"%f)
            if not os.path.exists(p): continue
            text = file(p).read()
            for t, r in replacements: text = text.replace(t,r)
            self.info("Applying %s"%p)
            self.runMysql(text, p, False)
            self.info(None, True)

    def finalize(self):
        self.info("Finalizing setup ...", None)
        self.info(None, True)
        self.success = True # At here, we have done successfully and nothing more after this flag is set

    def checkSystemSetup(self):
        def checkCloudDbFiles():
            self.info("Checking Cloudstack Container Service schema files ...", None)

            #coreSchemas = ['create-schema-ccs.sql', 'templates.sql']
            coreSchemas = ['create-schema-ccs.sql']

            checkingList = [os.path.join(self.dbFilesPath, x) for x in coreSchemas]
            for f in checkingList:
                if not os.path.isfile(f):
                    self.errorAndExit("Cloud DB required file %s was not found"%f)
            self.info(None, True)
        checkCloudDbFiles()

    def parseOptions(self):
        def parseUserAndHostInfo():
            def parseHostInfo(info):
                stuff = info.split(":")
                if len(stuff) == 1:
                    host = stuff[0]
                    port = 3306
                elif len(stuff) == 2:
                    host = stuff[0]
                    try: port = int(stuff[1])
                    except ValueError: self.errorAndExit("The database port must be an integer (%s)"%stuff[1])
                    if port < 1: self.errorAndExit("The database port must be a positive integer (%s)"%stuff[1])
                else:
                    self.errorAndExit("Invalid host and port format, it must be in format of host:port (%s)"%info)
                return host, port

            def parseUserAndPassword(cred):
                stuff = cred.split(':')
                if len(stuff) != 1 and len(stuff) != 2:
                    self.errorAndExit("Invalid user name and password format, must be in format of user:password (%s)"%cred)
                user = stuff[0]
                if len(user) < 1:
                    self.errorAndExit("Invalid user name and password format, must be in format of user:password, user name can not be empty")
                if len(stuff) == 1:
                    password = ''
                else:
                    password = stuff[1]

                forbidden = "' \\`"
                for f in forbidden:
                    if f in user: self.errorAndExit("User name cannot have the %r characters"%f)
                    if f in password: self.errorAndExit("Password cannot have the %r characters"%f)
                return user, password

            if self.args.creds:
                try:
                    try:
                        splitIndex = self.args.creds.rindex('@')
                    except ValueError:
                        # If it failed to find @, use host=localhost
                        splitIndex = len(self.args.creds)
                        self.args.creds += "@localhost"
                finally:
                    stuff = [self.args.creds[:splitIndex], self.args.creds[splitIndex+1:]]

                self.user,self.password = parseUserAndPassword(stuff[0])
                self.host,self.port = parseHostInfo(stuff[1])
            else:
                self.user = raw_input("Username:") 
                self.password = getpass.getpass("Password for " + self.user + ":")
                self.host = raw_input("Mysql Server:")
                self.port = raw_input("port:")

            self.debug("Following credentials are used to setup database")
            self.debug("    Mysql user name:%s"%self.user)
            self.debug("    Mysql user password:%s"%"******")
            self.debug("    Mysql server ip:%s"%self.host)
            self.debug("    Mysql server port:%s"%self.port)

    #---------------------- option parsing and command line checks ------------------------
        description = """ccs-setup-database [-h] [-v] [--deploy-as user:[password]@mysqlhost:[port]]

This script sets up the database for ShapeBlue CloudStack Container Service. For execution of the script 'cloud' user credentials are required. Also the host and port details of the MySql server are required. Script can be executed with no arguments, in which case username, password, mysql host and port details will be asked for interactivley. Alternativley user can pass the details in the format of user:[password]@mysqlhost:[port] to the script. 
        """
        self.parser = argparse.ArgumentParser(description=description)
        self.parser.add_argument("-v", "--debug", action='store_true',  help="If enabled, print the commands it will run as they run", dest='debug', default=False)
        self.parser.add_argument("-d", "--deploy-as", dest="creds", default="", 
                help="Credentials for 'cloud' database and MySql host details in the format user:[password]@mysqlhost:[port]", required=False)
        self.args = self.parser.parse_args()
        parseUserAndHostInfo()

    def run(self):
        try:
            self.parseOptions()
            print ''
            print "Setting up database for ShapeBlue CloudStack Container Service"
            print ''
            self.checkSystemSetup()
            self.setupDBSchema()
            self.finalize()
        finally:
            self.postRun()
        print ''
        print "ShapeBlue CloudStack Container Service database has been successfully initialized"
        print ''

if __name__ == "__main__":
   o = CcsDBDeployer()
   o.run()
